{"ast":null,"code":"/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\nlet defaults = getDefaults();\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = ch => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nconst noopTest = {\n  exec: function noopTest() {}\n};\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n  return obj;\n}\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.substr(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  } else {\n    return {\n      type: 'image',\n      raw,\n      href,\n      title,\n      text: escape(text)\n    };\n  }\n}\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  const indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(node => {\n    const matchIndentInNode = node.match(/^\\s+/);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    const [indentInNode] = matchIndentInNode;\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic ? rtrim(text, '\\n') : text\n      };\n    }\n  }\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text: text,\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *> ?/gm, '');\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?: [^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n        if (this.rules.block.hr.test(src)) {\n          // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n        raw = cap[0];\n        src = src.substring(raw.length);\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n        blankLine = false;\n        if (!line && /^ *$/.test(nextLine)) {\n          // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n            if (line.search(/[^ ]/) >= indent || !line.trim()) {\n              // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) {\n              // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else {\n              // Otherwise, improper indentation ends this item\n              break;\n            }\n            if (!blankLine && !line.trim()) {\n              // Check if current line is blank\n              blankLine = true;\n            }\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n        list.items.push({\n          type: 'list_item',\n          raw: raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n          return false;\n        });\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n      return list;\n    }\n  }\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        token.type = 'paragraph';\n        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.tokens = [];\n        this.lexer.inline(token.text, token.tokens);\n      }\n      return token;\n    }\n  }\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => {\n          return {\n            text: c\n          };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n            return {\n              text: c\n            };\n          });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = [];\n          this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = [];\n            this.lexer.inlineTokens(row[k].text, row[k].tokens);\n          }\n        }\n        return item;\n      }\n    }\n  }\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const token = {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      const token = {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n      return {\n        type: this.options.sanitize ? 'text' : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]\n      };\n    }\n  }\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!/>$/.test(trimmedUrl)) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n    const nextChar = match[1] || match[2] || '';\n    if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {\n      const lLength = match[0].length - 1;\n      let rDelim,\n        rLength,\n        delimTotal = lLength,\n        midDelimTotal = 0;\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n        if (match[3] || match[4]) {\n          // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = src.slice(1, lLength + match.index + rLength);\n          return {\n            type: 'em',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = src.slice(2, lLength + match.index + rLength - 1);\n        return {\n          type: 'strong',\n          raw: src.slice(0, lLength + match.index + rLength + 1),\n          text,\n          tokens: this.lexer.inlineTokens(text, [])\n        };\n      }\n    }\n  }\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2], [])\n      };\n    }\n  }\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)( [^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nblock.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n  + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\nblock.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('table', block.gfm.table) // interrupt paragraphs with table\n.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //        () Skip orphan delim inside strong    (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\ninline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n});\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text) {\n  return text\n  // em-dashes\n  .replace(/---/g, '\\u2014')\n  // en-dashes\n  .replace(/--/g, '\\u2013')\n  // opening singles\n  .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n  // closing singles & apostrophes\n  .replace(/'/g, '\\u2019')\n  // opening doubles\n  .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n  // closing doubles\n  .replace(/\"/g, '\\u201d')\n  // ellipses\n  .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, '\\n').replace(/\\t/g, '    ');\n    this.blockTokens(src, this.tokens);\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/^ +$/gm, '');\n    }\n    let token, lastToken, cutSrc, lastParagraphClipped;\n    while (src) {\n      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    this.state.top = true;\n    return tokens;\n  }\n  inline(src, tokens) {\n    this.inlineQueue.push({\n      src,\n      tokens\n    });\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n    }\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') {\n          // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n    code = code.replace(/\\n$/, '') + '\\n';\n    if (!lang) {\n      return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n    }\n    return '<pre><code class=\"' + this.options.langPrefix + escape(lang, true) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n  }\n  blockquote(quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  }\n  html(html) {\n    return html;\n  }\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      return '<h' + level + ' id=\"' + this.options.headerPrefix + slugger.slug(raw) + '\">' + text + '</h' + level + '>\\n';\n    }\n    // ignore IDs\n    return '<h' + level + '>' + text + '</h' + level + '>\\n';\n  }\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n  listitem(text) {\n    return '<li>' + text + '</li>\\n';\n  }\n  checkbox(checked) {\n    return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n  }\n  paragraph(text) {\n    return '<p>' + text + '</p>\\n';\n  }\n  table(header, body) {\n    if (body) body = '<tbody>' + body + '</tbody>';\n    return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n  }\n  tablerow(content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  }\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align ? '<' + type + ' align=\"' + flags.align + '\">' : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  }\n\n  // span level renderer\n  strong(text) {\n    return '<strong>' + text + '</strong>';\n  }\n  em(text) {\n    return '<em>' + text + '</em>';\n  }\n  codespan(text) {\n    return '<code>' + text + '</code>';\n  }\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n  del(text) {\n    return '<del>' + text + '</del>';\n  }\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n  em(text) {\n    return text;\n  }\n  codespan(text) {\n    return text;\n  }\n  del(text) {\n    return text;\n  }\n  html(text) {\n    return text;\n  }\n  text(text) {\n    return text;\n  }\n  link(href, title, text) {\n    return '' + text;\n  }\n  image(href, title, text) {\n    return '' + text;\n  }\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n  serialize(value) {\n    return value.toLowerCase().trim()\n    // remove html tags\n    .replace(/<[!\\/a-z].*?>/ig, '')\n    // remove unwanted chars\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} options\n   * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n      switch (token.type) {\n        case 'space':\n          {\n            continue;\n          }\n        case 'hr':\n          {\n            out += this.renderer.hr();\n            continue;\n          }\n        case 'heading':\n          {\n            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n            continue;\n          }\n        case 'code':\n          {\n            out += this.renderer.code(token.text, token.lang, token.escaped);\n            continue;\n          }\n        case 'table':\n          {\n            header = '';\n\n            // header\n            cell = '';\n            l2 = token.header.length;\n            for (j = 0; j < l2; j++) {\n              cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                header: true,\n                align: token.align[j]\n              });\n            }\n            header += this.renderer.tablerow(cell);\n            body = '';\n            l2 = token.rows.length;\n            for (j = 0; j < l2; j++) {\n              row = token.rows[j];\n              cell = '';\n              l3 = row.length;\n              for (k = 0; k < l3; k++) {\n                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                  header: false,\n                  align: token.align[k]\n                });\n              }\n              body += this.renderer.tablerow(cell);\n            }\n            out += this.renderer.table(header, body);\n            continue;\n          }\n        case 'blockquote':\n          {\n            body = this.parse(token.tokens);\n            out += this.renderer.blockquote(body);\n            continue;\n          }\n        case 'list':\n          {\n            ordered = token.ordered;\n            start = token.start;\n            loose = token.loose;\n            l2 = token.items.length;\n            body = '';\n            for (j = 0; j < l2; j++) {\n              item = token.items[j];\n              checked = item.checked;\n              task = item.task;\n              itemBody = '';\n              if (item.task) {\n                checkbox = this.renderer.checkbox(checked);\n                if (loose) {\n                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                  } else {\n                    item.tokens.unshift({\n                      type: 'text',\n                      text: checkbox\n                    });\n                  }\n                } else {\n                  itemBody += checkbox;\n                }\n              }\n              itemBody += this.parse(item.tokens, loose);\n              body += this.renderer.listitem(itemBody, task, checked);\n            }\n            out += this.renderer.list(body, ordered, start);\n            continue;\n          }\n        case 'html':\n          {\n            // TODO parse inline content if parameter markdown=1\n            out += this.renderer.html(token.text);\n            continue;\n          }\n        case 'paragraph':\n          {\n            out += this.renderer.paragraph(this.parseInline(token.tokens));\n            continue;\n          }\n        case 'text':\n          {\n            body = token.tokens ? this.parseInline(token.tokens) : token.text;\n            while (i + 1 < l && tokens[i + 1].type === 'text') {\n              token = tokens[++i];\n              body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n            }\n            out += top ? this.renderer.paragraph(body) : body;\n            continue;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n      switch (token.type) {\n        case 'escape':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n        case 'html':\n          {\n            out += renderer.html(token.text);\n            break;\n          }\n        case 'link':\n          {\n            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'image':\n          {\n            out += renderer.image(token.href, token.title, token.text);\n            break;\n          }\n        case 'strong':\n          {\n            out += renderer.strong(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'em':\n          {\n            out += renderer.em(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'codespan':\n          {\n            out += renderer.codespan(token.text);\n            break;\n          }\n        case 'br':\n          {\n            out += renderer.br();\n            break;\n          }\n        case 'del':\n          {\n            out += renderer.del(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'text':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n    const done = function (err) {\n      let out;\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n      opt.highlight = highlight;\n      return err ? callback(err) : callback(null, out);\n    };\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n    delete opt.highlight;\n    if (!tokens.length) return done();\n    let pending = 0;\n    marked.walkTokens(tokens, function (token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function (err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n    if (pending === 0) {\n      done();\n    }\n    return;\n  }\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options = marked.setOptions = function (opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = getDefaults;\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function (...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || {\n    renderers: {},\n    childTokens: {}\n  };\n  let hasExtensions;\n  args.forEach(pack => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach(ext => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) {\n          // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function (...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) {\n          // Tokenizer Extensions\n          if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) {\n            // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) {\n          // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function (token) {\n        pack.walkTokens.call(this, token);\n        if (walkTokens) {\n          walkTokens.call(this, token);\n        }\n      };\n    }\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function (tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token);\n    switch (token.type) {\n      case 'table':\n        {\n          for (const cell of token.header) {\n            marked.walkTokens(cell.tokens, callback);\n          }\n          for (const row of token.rows) {\n            for (const cell of row) {\n              marked.walkTokens(cell.tokens, callback);\n            }\n          }\n          break;\n        }\n      case 'list':\n        {\n          marked.walkTokens(token.items, callback);\n          break;\n        }\n      default:\n        {\n          if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {\n            // Walk any extensions\n            marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\n              marked.walkTokens(token[childTokens], callback);\n            });\n          } else if (token.tokens) {\n            marked.walkTokens(token.tokens, callback);\n          }\n        }\n    }\n  }\n};\n\n/**\n * Parse Inline\n */\nmarked.parseInline = function (src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["getDefaults","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartLists","smartypants","tokenizer","walkTokens","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","source","obj","name","val","getRegex","RegExp","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","merge","i","target","key","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","pop","splice","push","c","invert","l","suffLen","currChar","substr","findClosingBracket","b","level","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","slice","join","Tokenizer","constructor","options","space","src","rules","block","newline","code","codeBlockStyle","fences","lang","heading","trimmed","depth","inline","hr","blockquote","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","trimLeft","search","nextBulletRegex","Math","min","task","checked","trimRight","top","spacers","filter","t","hasMultipleLineBreaks","every","chars","lineBreaks","char","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","_escapes","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","Lexer","create","inlineQueue","lex","lexInline","next","lastToken","cutSrc","lastParagraphClipped","some","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parse","parser","parseInline","l2","l3","cell","itemBody","ret","renderers","unshift","marked","callback","done","err","pending","setTimeout","message","setOptions","use","args","opts","childTokens","hasExtensions","pack","ext","prevRenderer","apply","prop","prevTokenizer"],"sources":["C:/Users/Hp/Desktop/To do List/Law-LLM/node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  } else {\n    return {\n      type: 'image',\n      raw,\n      href,\n      title,\n      text: escape(text)\n    };\n  }\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text: text,\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *> ?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?: [^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw: raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        token.type = 'paragraph';\n        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.tokens = [];\n        this.lexer.inline(token.text, token.tokens);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = [];\n          this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = [];\n            this.lexer.inlineTokens(row[k].text, row[k].tokens);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const token = {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      const token = {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = src.slice(1, lLength + match.index + rLength);\n          return {\n            type: 'em',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = src.slice(2, lLength + match.index + rLength - 1);\n        return {\n          type: 'strong',\n          raw: src.slice(0, lLength + match.index + rLength + 1),\n          text,\n          tokens: this.lexer.inlineTokens(text, [])\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2], [])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)( [^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //        () Skip orphan delim inside strong    (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/\\t/g, '    ');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/^ +$/gm, '');\n    }\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens) {\n    this.inlineQueue.push({ src, tokens });\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote(quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  }\n\n  html(html) {\n    return html;\n  }\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      return '<h'\n        + level\n        + ' id=\"'\n        + this.options.headerPrefix\n        + slugger.slug(raw)\n        + '\">'\n        + text\n        + '</h'\n        + level\n        + '>\\n';\n    }\n    // ignore IDs\n    return '<h' + level + '>' + text + '</h' + level + '>\\n';\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text) {\n    return '<li>' + text + '</li>\\n';\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  paragraph(text) {\n    return '<p>' + text + '</p>\\n';\n  }\n\n  table(header, body) {\n    if (body) body = '<tbody>' + body + '</tbody>';\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow(content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? '<' + type + ' align=\"' + flags.align + '\">'\n      : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  }\n\n  // span level renderer\n  strong(text) {\n    return '<strong>' + text + '</strong>';\n  }\n\n  em(text) {\n    return '<em>' + text + '</em>';\n  }\n\n  codespan(text) {\n    return '<code>' + text + '</code>';\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  del(text) {\n    return '<del>' + text + '</del>';\n  }\n\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} options\n   * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n  let hasExtensions;\n\n  args.forEach((pack) => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        pack.walkTokens.call(this, token);\n        if (walkTokens) {\n          walkTokens.call(this, token);\n        }\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token);\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          marked.walkTokens(cell.tokens, callback);\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            marked.walkTokens(cell.tokens, callback);\n          }\n        }\n        break;\n      }\n      case 'list': {\n        marked.walkTokens(token.items, callback);\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            marked.walkTokens(token[childTokens], callback);\n          });\n        } else if (token.tokens) {\n          marked.walkTokens(token.tokens, callback);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Parse Inline\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}